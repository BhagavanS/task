#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dr:server');
var http = require('http');
var config = require('config');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  //var port = parseInt(val, 10);
  var port = config.get("server").port;
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
console.log(cluster.isMaster);
if (cluster.isMaster) {
  // for (var i = 0; i < numCPUs; i++) {
  // 	cluster.fork();
  // }
  cluster.fork();
  cluster.on('disconnect', function (worker) {
    console.log((new Date()), 'Server instance stopped,starting another instance.');
    cluster.fork();
  });
  cluster.on('exit', function (worker, code, signal) {
    console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal + ' Starting a new worker');
    cluster.fork();
  });

}
else {
  /**
 * Get port from environment and store in Express.
 */

  var port = normalizePort(process.env.PORT || '5000');
  app.set('port', port);
  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on localhost' + bind);
  }

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  //resuming on uncaught exception
  process.on('uncaughtException', function (err) {
    console.log(err);
    // helper.crashReport(err.stack, 'crashReport');
  });


}











